"""
Code for generation of Ornstein Uhlenbeck Process as an input to the cell. 
Defined by,
dX(t) = θ * [μ – X(t)] * dt + σ * dW(t),
"where dX(t) is an increment of the process X between t and dt, and σ > 0 is the instantaneous 
diffusion term, used to measure the volatility of the process, which is assumed
to be constant. On the other side, μ is the process long-term expected value, and θ > 0 is
the speed or reversion of X(t) toward μ, both also assumed to be constant. Finally, dW(t)
is an increment during the interval (t,t + dt) of a standard Brownian motion under the
real probability measure P, which follows a normal distribution with expected value 0 and
variance t." 
Reference for definition: Mejía Vega, C.A. Calibration of the exponential Ornstein–Uhlenbeck process when spot prices are visible through the maximum log-likelihood method. Example with gold prices. Adv Differ Equ 2018, 269 (2018). https://doi.org/10.1186/s13662-018-1718-4

INPUTS: 
dt: time step, smallest allowed in NEURON

tau = time constant of OU process, defines the speed of process to go back to mean value

sigma = standart deviation from the mean value

mu: mean value of the process, with deviations from the mean defined by sigma, within small time 
interval defined by tau, value of OU process goes back to 0 which generates a noise input. 
OUTPUT
x: OU process, noisy input generated by the code
"""
import numpy as np

np.random.seed(10)
def ou_proc(dt, tau, T, sigma, mu):
    n = int(T / dt)  # Number of time steps.
    t = np.linspace(0., T, n)  # Vector of times.
    
    sigma_bis = sigma * np.sqrt(2. / tau)
    sqrtdt = np.sqrt(dt)
    x = np.zeros(n)
    for i in range(n - 1):
        x[i + 1] = x[i] + dt * (-(x[i] - mu) / tau) + \
            sigma_bis * sqrtdt * np.random.normal(0,1,1)
    # fig, ax = plt.subplots(1, 1, figsize=(8, 4))
    # plt.plot(t, x, lw=2)
    # plt.xlim(0,500)
    # plt.title('The OU Process with tau {} ms'.format(tau))
    # plt.ylabel('OU-value (mV)',fontsize=15)
    # plt.xlabel('time (ms)',fontsize=15)
    return x